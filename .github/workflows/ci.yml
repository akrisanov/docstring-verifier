name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript type checking
        run: pnpm run check-types

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        working-directory: tools/python
        run: uv sync --all-groups

      - name: Run linter (ruff)
        working-directory: tools/python
        run: uv run ruff check .

      - name: Run formatter check (ruff)
        working-directory: tools/python
        run: uv run ruff format --check .

      - name: Run tests
        working-directory: tools/python
        run: uv run pytest -v --cov --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: tools/python/coverage.xml
          flags: python
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          name: python-coverage
          disable_search: true

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          echo "=== Running tests with coverage ==="
          echo "Command: xvfb-run -a pnpm run --filter=docstring-verifier test"
          echo "First, compile the extension..."
          pnpm run compile
          echo "Now compile tests..."
          pnpm run compile-tests
          echo "Now run tests with coverage..."
          xvfb-run -a pnpm exec vscode-test --coverage --coverage-output ./coverage --coverage-reporter lcov --coverage-reporter text-summary
          VSCODE_TEST_EXIT=$?
          echo "=== vscode-test exit code: $VSCODE_TEST_EXIT ==="
          echo "=== Listing coverage directory ==="
          ls -lha coverage/ || echo "Coverage directory does not exist"
          if [ -f coverage/lcov.info ]; then
            SIZE=$(stat -c%s coverage/lcov.info)
            echo "lcov.info size: $SIZE bytes"
            if [ "$SIZE" -gt 0 ]; then
              echo "=== Running fix-lcov-paths.js ==="
              node scripts/fix-lcov-paths.js
            else
              echo "❌ lcov.info is empty, skipping fix script"
            fi
          else
            echo "❌ lcov.info not found"
          fi
          exit $VSCODE_TEST_EXIT
        if: runner.os == 'Linux'

      - name: Check coverage file
        run: |
          echo "=== Checking coverage file ==="
          if [ ! -f coverage/lcov.info ]; then
            echo "❌ coverage/lcov.info does not exist!"
            echo "Listing coverage directory:"
            ls -lha coverage/ || echo "Coverage directory doesn't exist"
            exit 1
          fi
          SIZE=$(stat -c%s coverage/lcov.info 2>/dev/null || stat -f%z coverage/lcov.info)
          echo "Coverage file size: $SIZE bytes"
          if [ "$SIZE" -eq 0 ]; then
            echo "❌ coverage/lcov.info is empty!"
            echo "=== First 50 lines of test output ==="
            echo "Please check the 'Run tests with coverage' step output"
            exit 1
          fi
          echo "✓ Coverage file exists and is not empty ($SIZE bytes)"

      - name: Validate coverage report
        run: pnpm run test:validate-coverage
        if: success()

      - name: Debug coverage file
        run: |
          echo "=== Working directory ==="
          pwd
          echo "=== Coverage file info ==="
          ls -lh coverage/lcov.info
          SIZE=$(stat -f%z coverage/lcov.info 2>/dev/null || stat -c%s coverage/lcov.info)
          echo "File size: $SIZE bytes"
          if [ "$SIZE" -gt 0 ]; then
            echo "=== Source files in lcov ==="
            grep "^SF:" coverage/lcov.info | head -10
            echo "=== Checking if source files exist ==="
            for file in $(grep "^SF:" coverage/lcov.info | cut -d: -f2 | head -5); do
              if [ -f "$file" ]; then
                echo "✓ $file exists"
              else
                echo "✗ $file NOT FOUND"
              fi
            done
          else
            echo "❌ WARNING: coverage/lcov.info is empty!"
          fi
          echo "=== Repository root files ==="
          ls -la src/ | head -5

      - name: Upload TypeScript coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: ./coverage/lcov.info
          flags: typescript
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          name: typescript-coverage
          use_oidc: false
          plugin: noop

  build:
    name: Build Extension
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build extension
        run: pnpm run compile

      - name: Package extension
        run: pnpm run package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: dist/
          retention-days: 7
